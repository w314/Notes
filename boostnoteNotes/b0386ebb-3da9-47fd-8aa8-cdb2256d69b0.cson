createdAt: "2020-04-21T20:30:10.770Z"
updatedAt: "2020-04-22T16:49:13.669Z"
type: "MARKDOWN_NOTE"
folder: "0502aa55141f2315e808"
title: "Graphs"
tags: [
  "graph"
  "network"
  "shortest_path"
  "dijkstra's_algorithm"
]
content: '''
  # Graphs
  Also called Netwoks.
  - `node degree`: the number of edges connected to a node
  
  
  ## Representing a graph
  xx`0` - `1`-`2`x
  xxxxxxxxx \\ /xxxx
  xxxxxxxxx`3`xxxx      
  
  ### `vertex` and `edge` objects
  ### `edge list`
  - list of edges
  - edges represented by a list of two elements
  - elements correspond to the id numbers of vertices
  [[0, 1], [1, 2], [1, 3], [2. 3]]
  ### `adjacency list`
  - vertices have an id number that corresponds to an index of the array
  - in your array each space stores a list of nodes that the node of that id is adjacent to
  - good solution when calculating `node degree`
  [[1], [0, 2, 3], [1, 3], [1, 2]]
  ### `adjacency matrix`
  - a 2D array where the lists of the list are of equal length
  - the indices of the outer array represent nodes with those id numbers
  - the list inside represents (by using `0`s and `1`s) which nodes are adjacent
  - the connection to self is represented by `0`, if there are adjacent nodes and `1` if the node is not connected to any other node
  [
  [0, 1, 0, 0],
  [1, 0, 1, 1],
  [0, 1, 0, 1],
  [0, 1, 1, 0]
  ]
  
  ## graph traversal
  `Traversal` vs `search`, in a traversal you look at every element, in a search you stop after you have found the one you are looking for.
  
  ### `DFS` (Depths First Search)
  We follow one path as far as it will go.
  #### time complexity:
  - `O(|E| + |V|)`
  - where `|E|` the number of edges, we visit them twice, but it still approximate to |E|
  - `|V|` counts for looking up the vertices and it depends on the data structure used to store them
  
  #### `DFS` using  a `stack`
  - a common implementation of DFS uses a stack
  - as there is no root, you can start at any node randomly
  - mark is as `seen` store it in the stack
  - pick an edge follow it, store the node in the stack
  - do it again and again 
  - if you hit a node you have already seen go back and try another edge
  - if there is no more edge, you pop the current node from the stack and go the one before it
  - you continue untill your stack is empty or you have found the node you were looking for
  - 
  #### `DFS` using `recursion`
  
  
  ### `BFS` (Breadth First Search)
  We look at all the nodes adjacent to one node before moving on to the next level
  - `queue` is used to implement it
  - method:
    - select a node and mark it as `seen` (do not add to queue)
    - visit a node adjacent to it and add that node to the `queue`
    - visit all other adjacent nodes and add those to the `queue` too
    - when all edges were visited `dequeu` a node from the queue and visit its adjacent nodes
  - time complexity is `O(|E| + |V|)`
  
  ## Shortest Path Problem
  In case of `unweighted edges`, you want to find the path with the least number of edges, a breadth first search is the solution.
  
  ### `Dijkstra's Algorithm`
  Shortest path soluton for weighted undirected graphs.
  - common implementation uses a `min priority queue`
  - 
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
