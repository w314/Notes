node, javascript, dotenv, express, jasmine

# Initial setup
- Clone repository.
- Run `npm install`
- Add node_modules to .gitignore
```shell
echo 'node_modules' > .gitignore
```
- make intial commit
- remove current git remote and replace it with your own remote git repository
```shell
# to check for remote git repository run
git remote

# to remove it run
git remote remove <repository_name>

# to add your remote repository run
git remote add <repository_url>

# to check remote repositories run
git remote 
```

### App would not start properly when cloned. To fix it:

- As in `package.json ` the `start` script runs *node src/server.ts*
`Node` cannot run `.ts` files, you need:
    - to use `ts-node` to run it
    - have `tsc-watch` on which would continously convert all typescript files to javascript files
    - install `nodemon` which restarts server after each save and use `nodemon .src/server.ts`
    - build your project first
- As ts-node is already installed change your start scritp to: `"start": "ts-node ./src/server.ts"
- Your start scripts should run without error now

### Other settings
### Use environment variables
- create a `.env` file
- add it to `.gitignore`
- install `dotenv`
### Connect to a Postgres Database
- Set environment variables in `.env` file:
```shell
POSTGRES_HOST=127.0.01
POSTGRES_DB=
POSTGRES_USER=
POSTGRES_PASSWORD=
```
- under `.src` create a `database.ts` file with the content
```typescript
import dotenv from 'dotenv'
import { Pool } from 'pg'

dotenv.config()

const {
    POSTGRES_HOST,
    POSTGRES_DB,
    POSTGRES_USER,
    POSTGRES_PASSWORD
}

const client = new Pool({
    host: POSTGRES_HOST,
    database: POSTGRES_DB,
    user: POSTGRES_USER,
    password: POSTGRES_PASSWORD
})

export default client
```

#### Add a build script:
```shell
"build": "npx tsc"
```
- set `"outDir"` *tsconfig.json* to: `"./dist"`
- add `dist` folder to `.gitignore`
```shell
echo 'dist' >> .gitignore
```

